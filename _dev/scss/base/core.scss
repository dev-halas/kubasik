
html {
    scroll-behavior: smooth;
    scroll-padding-top: 10vh;
}

body {
    font-family: 'Syne', sans-serif;
    background-color: $dark;
    color: $light;
}

h1, h2, h3, h4 {
    /*
    font-family: 'Open Sans', sans-serif;
    */
}



a {
    text-decoration: none;
    color: inherit;
    cursor: pointer;
}

button {
    border: none;
    background-color: transparent;
    cursor: pointer;
}

h1 {
    font-size: calculate-clamp(30, 64);
    font-weight: 500;
    line-height: 1.1;
}

h2 {
    font-size: 1.8rem;
    font-weight: 500;
    line-height: 1.2;
}

h3 {
    font-size: 1.6rem;
    font-weight: 500;
    line-height: 1.3;
}

h4 {
    font-size: calculate-clamp(20, 32);
    font-weight: 500;
    line-height: 1.5;
}

.h1 {
    @extend h1;
}

.h3 {
    @extend h3;
}

$breakpoints: (
  'mobile':  480px,
  'small': 768px,
  'tablet': 1024px,
  'laptop':  1200px,
  'large': 1600px,
  'fullhd': 1920px
) !default;

@mixin responsive($breakpoint) {
    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {
      // Prints a media query based on the value
      @media (max-width: map-get($breakpoints, $breakpoint)) {
        @content;
      }
    }
   
    // If the key doesn't exist in the map
    @else {
      @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
          + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}




$container: 80vw;
$containerMobile: 90vw;

.container {
    width: min($container, 1600px);
    margin: 0 auto;
    position: relative;
    @include responsive('tablet') {
        width: min($containerMobile, 900px);
    }
}

.container-big {
    @extend .container;
    width: min($containerMobile, 1600px);
}

@media screen and (max-width: 782px) {
    html {
        margin-top: 0px !important;
    }
}

@mixin transition($property...){
    transition-property: $property;
    -webkit-transition-property: $property;
    -moz-transition-property: $property;
    -ms-transition-property: $property;
    -o-transition-property: $property;

    transition-timing-function: ease-in-out;
    -webkit-transition-timing-function: ease-in-out;
    -moz-transition-timing-function: ease-in-out;
    -ms-transition-timing-function: ease-in-out;
    -o-transition-timing-function: ease-in-out;
    
    transition-duration: .3s;
    -webkit-transition-duration: .3s;
    -moz-transition-duration: .3s;
    -ms-transition-duration: .3s;
    -o-transition-duration: .3s;
}
